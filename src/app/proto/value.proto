syntax = "proto3";
package dma;

message LinkProto {
  string label = 1;
  string url = 2;
  bool image_cover = 3;
}

message DiceProto
{
  int32 number = 1;
  int32 dice = 2;
  int32 modifier = 3;
}

message RationalProto
{
  // All the values must be positive!
  int32 leader = 1;
  int32 nominator = 2;
  int32 denominator = 3;
  bool negative = 4;
}

message DistanceProto
{
  RationalProto miles = 1;
  RationalProto feet = 2;
  RationalProto inches = 3;
}

message SpeedProto {
  enum Mode {
    UNKNONW_MODE = 0;
    BURROW = 1;
    CLIMB = 2;
    FLY = 3;
    SWIM = 4;
    RUN = 5;
  }
  Mode mode = 1;
  int32 feet = 2;
  bool hover = 3;
}

enum SizeProto {
  UNKNOWN_SIZE = 0;
  TINY = 1;
  SMALL = 2;
  MEDIUM = 3;
  LARGE = 4;
  HUGE = 5;
  GARGANTUAN = 6;
}

message ModifierProto {
  enum Type {
    UNKNOWN = 0;
    DODGE = 1;
    ARMOR = 2;
    EQUIPMENT = 3;
    SHIELD = 4;
    GENERAL = 5;
    NATURAL_ARMOR = 6;
    ABILITY = 7;
    SIZE = 8;
    RACIAL = 9;
    CIRCUMSTANCE = 10;
    ENHANCEMENT = 11;
    DEFLECTION = 12;
    RAGE = 13;
    COMPETENCE = 14;
    SYNERGY = 15;
    SACRED = 16;
    LUCK = 17;
    RESISTANCE = 18;
  }

  message Modifier {
    int32 value = 1;
    Type type = 2;
    string condition = 3;
  }
  repeated Modifier modifier = 1;
}

message NameAndModifierProto {
  string name = 1;
  ModifierProto modifier = 2;
}

message DamageProto {
  DiceProto damage = 1;

  enum DamageType {
    UNKNOWN_DAMAGE_TYPE = 0;
    ACID = 1;
    BLUDGEONING = 2;
    COLD = 3;
    FIRE = 4;
    FORCE = 5;
    LIGHTNING = 6;
    NECROTIC = 7;
    PIERCING = 8;
    POISON = 9;
    PSYCHIC = 10;
    RADIANT = 11;
    SLASHING = 12;
    THUNDER = 13;
    BLUDGEONING_NON_MAGICAL = 14;
    PIERCING_NON_MAGICAL = 15;
    SLASHING_NON_MAGICAL = 16;
    BLUDGEONING_NON_MAGICAL_NON_SILVER = 17;
    PIERCING_NON_MAGICAL_NON_SILVER = 18;
    SLASHING_NON_MAGICAL_NON_SILVER = 19;
    BLUDGEONING_NON_MAGICAL_NON_ADAMANTINE = 20;
    PIERCING_NON_MAGICAL_NON_ADAMANTINE = 21;
    SLASHING_NON_MAGICAL_NON_ADAMANTINE = 22;
    DAMAGE_FROM_SPELLS = 23;
  }
  DamageType type = 2;
}

message ConditionalProto
{
  string generic = 1;
  WeaponStyle weapon_style = 2;
  Ability ability = 3;

  message Limit {
    enum Operator {
      ABOVE = 0;
      ABOVE_OR_EQUAL = 1;
      EQUAL = 2;
      BELOW_OR_EQUAL = 3;
      BELOW = 4;
    }
    Operator operator = 1;
    int32 value = 2;
  }
  Limit limit = 4;
}

message ParametersProto
{
  message Distance
  {
    string name = 1;
    DistanceProto distance = 2;
  }
  repeated Distance distance = 1;

  message Text
  {
    string name = 1;
    string text = 2;
  }
  repeated Text text = 2;

  message Number
  {
    string name = 1;
    int32 number = 2;
  }
  repeated Number number = 3;

  message Modifier
  {
    string name = 1;
    ModifierProto modifier = 2;
  }
  repeated Modifier modifier = 4;

  message Damage
  {
    string name = 1;
    DamageProto damage = 2;
  }
  repeated Damage damage = 5;

  message SpellClassParam
  {
    string name = 1;
    SpellClass spell_class = 2;
  }
  repeated SpellClassParam spell_class = 6;

  message SkillSubtypeParam
  {
    string name = 1;
    SkillSubtype skill_subtype = 2;
  }
  repeated SkillSubtypeParam skill_subtype = 7;
  repeated FeatType feat_type = 8;
  repeated string feat_name = 9;
}

message ReferenceProto
{
  string name = 1;
  string id = 2;
  repeated RangeProto pages = 3;
}

message RangeProto
{
  int32 low = 1;
  int32 high = 2;
}

message ExpressionProto {
  enum Operator {
    NONE = 0;
    ADD = 1;
    SUBTRACT = 2;
    MULTIPLY = 3;
    DIVIDE = 4;
    MODULO = 5;
    MIN = 6;
    MAX = 7;
  }

  message Literal {
    string variable = 1;
    int32 integer = 2;
  }

  Operator operator = 1;
  repeated ExpressionProto operand = 2;
  Literal literal = 3;
}

message CalendarProto {
  message Year {
    int32 start = 1;
    int32 end = 2;
    string name = 3;
  }
  repeated Year year = 1;

  message Month {
    string name = 1;
    int32 days = 2;
    int32 leap_years = 3;
  }
  repeated Month month = 2;

  int32 days_per_week = 3;
  int32 hours_per_day = 4;
  int32 minutes_per_hour = 5;
  int32 seconds_per_minute = 6;
}

message DurationProto {
  int32 rounds = 1;
  int32 minutes = 2;
  int32 hours = 3;
  int32 days = 4;
  int32 years = 5;
  int32 standard_actions = 6;
  int32 bonus_actions = 7;
  int32 reactions = 8;
}

message DateProto {
  int32 year = 1;
  int32 month = 2;
  int32 day = 3;
  int32 hour = 4;
  int32 minute = 5;
}

message ConditionValueProto {
  string name = 1;
  string description = 2;
  string summary = 3;
  DurationProto duration = 4;
  bool ends_before_turn = 5;
}

message TimedConditionProto {
  ConditionValueProto condition = 1;
  string source_id = 2;
  int32 endRound = 3;
  DateProto end_date = 4;
}

message TargetedTimedConditionProto {
  TimedConditionProto condition = 1;
  repeated string target_id = 3;
}

message MoneyProto {
  int32 copper = 1;
  int32 silver = 2;
  int32 gold = 3;
  int32 platinum = 4;
}

message WeightProto {
  RationalProto pounds = 1;
  RationalProto ounces = 2;
  RationalProto carats = 3;
}

message CriticalProto
{
  RangeProto threat = 1;
  int32 multiplier = 2;
}

message RandomDurationProto
{
  DurationProto duration = 1;
  repeated DiceProto dice = 2;
}

message AreaProto
{
  message Metric
  {
    RationalProto square_meters = 1;
    RationalProto square_decimeters = 2;
    RationalProto square_centimeters = 3;
  }
  Metric metric = 1;

  message Imperial
  {
    RationalProto square_yards = 1;
    RationalProto square_feet = 2;
    RationalProto square_inches = 3;
  }
  Imperial imperial = 2;
}

message VolumeProto
{
  message Metric
  {
    RationalProto cubic_meters = 1;
    RationalProto cubic_decimeters = 2;
    RationalProto cubic_centimeters = 3;
  }
  Metric metric = 1;

  message Imperial
  {
    RationalProto cubic_feet = 1;
    RationalProto cubic_inches = 2;
  }
  Imperial imperial = 2;

  message Gallons
  {
    RationalProto gallons = 1;
    RationalProto quarts = 2;
    RationalProto pints = 3;
    RationalProto cups = 4;
  }
  Gallons gallons = 3;

  message Liters
  {
    RationalProto liters = 1;
    RationalProto deciliters = 2;
    RationalProto centiliters = 3;
  }
  Liters liters = 4;
}

message RestrictionProto {
  string generic = 1;
  WeaponStyle weapon_style = 2;
  Ability ability = 3;

  message Limit {
    enum Operator {
      ABOVE = 0;
      ABOVE_OR_EQUAL = 1;
      EQUAL = 2;
      BELOW_OR_EQUAL = 3;
      BELOW = 4;
    }
    Operator operator = 1;
    int32 value = 2;
  }
  Limit limit = 4;
}

message FeatSelection {
  string name = 1;
  repeated string qualifier = 2;
}

message PriceProto
{
  string currency = 1;
  int32 number = 2;
  int32 precision = 3;
}

// Shared enums.

enum WeaponStyle {
  UNKNOWN_STYLE = 0;
  TWOHANDED_MELEE = 1;
  ONEHANDED_MELEE = 2;
  LIGHT_MELEE = 3;
  UNARMED = 4;
  RANGED_TOUCH = 5;
  RANGED = 6;
  THROWN_TOUCH = 7;
  THROWN = 8;
  TOUCH = 9;
  THROWN_TWO_HANDED = 10;
}

enum Ability {
  UNKNOWN = 0;
  STRENGTH = 1;
  DEXTERITY = 2;
  CONSTITUTION = 3;
  INTELLIGENCE = 4;
  WISDOM = 5;
  CHARISMA = 6;
  NONE = 7;
}

enum SpellClass {
  UNKNOWN_SPELL_CLASS = 0;
  BARD = 1;
  CLERIC = 2;
  DRUID = 3;
  PALADIN = 4;
  RANGER = 5;
  SORCERER = 6;
  WARLOCK = 7;
  WIZARD = 8;
}

enum SkillSubtype {
  UNKNOWN_SKILL_SUBTYPE = 0;
  DROW_RELIGION = 1;
  RELIGION = 2;
  ARCANA = 3;
  ALCHEMY = 4;
  ANY_ONE = 5;
}

enum Proficiency {
  UNKNOWN_PROFICIENCY = 0;
  SIMPLE = 1;
  MARTIAL = 2;
  EXOCTIC = 3;
  IMPROVISED = 4;
  NONE_PROFICIENCY = 5;
}

enum ArmorType {
  UNKNOWN_ARMOR = 0;
  LIGHT_ARMOR = 1;
  MEDIUM_ARMOR = 2;
  HEAVY_ARMOR = 3;
  SHIELD = 4;
  TOWER_SHIELD = 5;
  NONE_ARMOR = 6;
}

enum AlignmentProto {
  UNKNOWN_ALIGNMENT = 0;
  LAWFUL_GOOD = 1;
  NEUTRAL_GOOD = 2;
  CHAOTIC_GOOD = 3;
  LAWFUL_NEUTRAL = 4;
  TRUE_NEUTRAL = 5;
  CHAOTIC_NEUTRAL = 6;
  LAWFUL_EVIL = 7;
  NEUTRAL_EVIL = 8;
  CHAOTIC_EVIL = 9;
  ANY_CHAOTIC = 10;
  ANY_EVIL = 11;
  ANY_GOOD = 12;
  ANY_LAWFUL = 13;
  ANY_ALIGNMENT = 14;
  UNALIGNED = 15;
  ANY_NON_LAWFUL = 16;
}

enum AlignmentStatus {
  UNKNOWN_ALIGNMENT_STATUS = 0;
  ALWAYS = 1;
  USUALLY = 2;
  OFTEN = 3;
}

enum Gender {
  UNKNOWN_GENDER = 0;
  FEMALE = 1;
  MALE = 2;
  NONE_GENDER = 3;
}

enum BattleStatus {
  ENDED = 0;
  STARTING = 1;
  SURPRISED = 2;
  ONGOING = 3;
}

enum FeatType {
  UNKNOWN_FEAT_TYPE = 0;
  GENERAL = 1;
  ITEM_CREATION = 2;
  METAMAGIC = 3;
  REGIONAL = 4;
  SPECIAL = 5;
  FIGHTER = 6;
}

enum MonsterTypeProto {
  UNKNOWN_MONSTER_TYPE = 0;
  ABERRATION = 1;
  BEAST = 2;
  CELESTIAL = 3;
  CONSTRUCT = 4;
  DRAGON = 5;
  ELEMENTAL = 6;
  FEY = 7;
  FIEND = 8;
  GIANT = 9;
  HUMANOID = 10;
  MONSTROSITY = 11;
  OOZE = 12;
  PLANT = 13;
  UNDEAD = 14;
}

enum MonsterTagProto {
  UNKNOWN_MONSTER_TAG = 0;
  ANY_RACE = 2;
  BULLYWUG = 20;
  CHROMATIC = 33;
  DEMON = 15;
  DEVIL = 3;
  DRAGONBORN = 8;
  DROW = 24;
  DWARF = 12;
  ELF = 11;
  GENASI = 26;
  GITH = 32;
  GNOLL = 29;
  GNOME = 6;
  GOBLINOID = 13;
  GOLEM = 30;
  GOLIATH = 27;
  HALF_ELF = 5;
  HALF_ORC = 7;
  HALFLING = 9;
  HUMAN = 4;
  KENKU = 21;
  KOBOLD = 16;
  KUO_TOA = 19;
  LIZARDFOLK = 22;
  METALLIC = 35;
  ORC = 18;
  QUAGGOTH = 23;
  SAHUAGIN = 25;
  SHADOW = 31;
  SHAPECHANGER = 1;
  SWARM = 14;
  TIEFLING = 10;
  TITAN = 34;
  TROGLODYTE = 17;
  YUAN_TI = 28;
}

enum MetaMagic {
  UNKNOWN_META_MAGIC = 0;

  // PHB.
  EMPOWERED = 1;
  ENLARGED = 2;
  EXTENDED = 3;
  HEIGHTENED = 4;
  MAXIMIZED = 5;
  QUICKENED = 6;
  SILENT = 7;
  STILL = 8;
  WIDENED = 9;
}